version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo destroy environment
              aws s3 rb "s3://udapeople-${CIRCLE_WORKFLOW_ID}" --force 
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            export SUCCESS=$(curl -H "token:${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID})
            echo ${SUCCESS}
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              ls
              npm install
              npm run migration:revert
            fi

            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test the code
          command: |
            cd frontend
            npm run test             
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test the code
          command: |
            cd backend
            npm run test      
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install  
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build]      
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install     
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
           apk add --update tar gzip curl
           pip install awscli

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-vitorpavan \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-vitorpavan \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Get and save public DNS of EC2 instance to https://memstash.io/
          command: |
            export BACKEND_API=$(aws ec2 describe-instances \
              --region ${AWS_DEFAULT_REGION}\
              --filters "Name=tag:Name,Values=backend-ec2-${CIRCLE_WORKFLOW_ID}"\
              --query "Reservations[*].Instances[0].PublicDnsName" \
              --output text)
            echo ${BACKEND_API}
            export URL="http://${BACKEND_API}:3030/api/status"
            echo ${URL}
            curl -H "Content-Type: text/plain" \
              -H "token:${CIRCLE_WORKFLOW_ID}" \
              --request PUT \
              --data "$URL" \
              https://api.memstash.io/values/url-${CIRCLE_WORKFLOW_ID}
      - destroy-environment
      - revert-migrations
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.12
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["d6:a0:ab:8b:87:f6:b8:9d:4b:00:52:de:fd:8a:2b:4b"]
      # attach workspace
      - attach_workspace:
          at: ~/project      
      - run:
          name: Install system dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli

      - run:
          name: Get the public DNS of EC2 from AWS
          command: |
            cd .circleci/ansible/
            aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} \
            --filters "Name=tag:Name,Values=backend-ec2-${CIRCLE_WORKFLOW_ID}" \
            --query "Reservations[*].Instances[0].PublicDnsName" \
            --output text >> inventory.txt
            cat inventory.txt
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible/
            ansible-playbook -i inventory.txt configure-server.yml -l web     
      - destroy-environment
      - revert-migrations
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install     
            npm run migrations
      - run:
          name: Send migration results to memstash
          command: |
            curl -H "Content-Type: text/plain" \
               -H "token:${CIRCLE_WORKFLOW_ID}" \
               --request PUT \
               --data "1" \
               https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID}
      - destroy-environment
      - revert-migrations
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.7-alpine3.12
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
           apk add --update tar gzip ansible nodejs npm curl
           pip install awscli
      - restore_cache:
          keys: [frontend-build]           
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --region ${AWS_DEFAULT_REGION} \
              --filters "Name=tag:Name,Values=backend-ec2-${CIRCLE_WORKFLOW_ID}" \
              --query "Reservations[*].Instances[0].PublicDnsName" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=$API_URL" > frontend/.env
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install webpack-dev-server -g
            npm install
            npm run build
      - run: 
          name: Copy built frontend files to the S3 bucket
          command: |
            aws s3 cp ./frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID}/ --recursive      
      - destroy-environment
      - revert-migrations
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.12
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
           apk add --update tar gzip ansible nodejs npm curl
           pip install awscli      
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["d6:a0:ab:8b:87:f6:b8:9d:4b:00:52:de:fd:8a:2b:4b"]      
      # attach workspace
      - attach_workspace:
          at: ~/project
      - restore_cache:
          keys: [backend-build]      
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install   
      - run:
          name: Get the public DNS of EC2 from AWS
          command: |
            aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} \
            --filters "Name=tag:Name,Values=backend-ec2-${CIRCLE_WORKFLOW_ID}" \
            --query "Reservations[*].Instances[0].PublicDnsName" \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - run:
          name: Deploy backend
          command: |
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt  deploy-backend.yml -l web        
      - destroy-environment
      - revert-migrations
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
           apk add --update tar gzip ansible nodejs npm curl
           pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --region ${AWS_DEFAULT_REGION} \
              --filters "Name=tag:Name,Values=backend-ec2-${CIRCLE_WORKFLOW_ID}" \
              --query "Reservations[*].Instances[0].PublicDnsName" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030/api/status"
            echo ${API_URL}
            if (curl -s ${API_URL}) | grep "ok"
            then 
              return 0
            else 
              return 1
            fi
      - run:
          name: Frontend smoke test
          command: |
            #URL="http://udapeople-b5ab9ec4-2caa-4644-abb5-409efbef9540.s3-website-us-east-1.amazonaws.com/#/employees"
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if (curl -s ${URL}) | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment
      - revert-migrations
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      # Checkout code from git
      - checkout
      - add_ssh_keys:
          fingerprints: ["d6:a0:ab:8b:87:f6:b8:9d:4b:00:52:de:fd:8a:2b:4b"]      
      - run:
          name: Install dependencies
          command: |
           apk add --update tar gzip ansible nodejs npm curl
           pip install awscli
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
            echo OldWorkflowId: "${OldWorkflowID}"

            export STACKS=$(aws cloudformation list-stacks \
              --query "StackSummaries[*].StackName" \
              --stack-status-filter UPDATE_COMPLETE CREATE_COMPLETE --output text) 
            echo Stacks: "${STACKS}"

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=udapeople-vitorpavan \
              --stack-name udapeople-cloudfront \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}"          

            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}"]]
            then
              echo "DeleteStacks"
              # aws s3 rb "s3://udapeople-${CIRCLE_WORKFLOW_ID}" --force 
              # aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}"
              # aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}"
            else
              echo "First CloudFront Created"
            fi
      - destroy-environment
      - revert-migrations
      # Here's where you will add some code to rollback on failure  

  cleanup:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      # Checkout code from git
      - checkout
      - add_ssh_keys:
          fingerprints: ["d6:a0:ab:8b:87:f6:b8:9d:4b:00:52:de:fd:8a:2b:4b"]      
      - run:
          name: Install dependencies
          command: |
           apk add --update tar gzip ansible nodejs npm curl
           pip install awscli   
      - run:
          name: Get old stack workflow id and Remove old stacks and files
          command: |
            export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 

            if (( "${STACKS[@]}" =~ "${OldWorkflowID}" ));
            then
              aws s3 rb "s3://udapeople-${OldWorkflowID}" --force 
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend  
      # - test-frontend:
      #     requires: [build-frontend]       
      # - test-backend:
      #     requires: [build-backend]         
      # - scan-backend:
      #     requires: [build-backend]      
      # - scan-frontend:
      #     requires: [build-frontend]  

      - deploy-infrastructure:
          requires: [build-frontend, build-backend]
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: master
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: master
      - run-migrations:
          requires: [configure-infrastructure]
          filters:
            branches:
              only: master
      - deploy-frontend:
          requires: [run-migrations]
          filters:
            branches:
              only: master
      - deploy-backend:
          requires: [run-migrations]
          filters:
            branches:
              only: master
      - smoke-test:
          requires: [deploy-frontend, deploy-backend]
          filters:
            branches:
              only: master

      - cloudfront-update:
          requires: [smoke-test]
          filters:
            branches:
              only: master
      - cleanup:
          requires: [cloudfront-update]
          filters:
            branches:
              only: master